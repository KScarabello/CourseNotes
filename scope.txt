SCOPE

scope - 'where to look for things'
   
  Every variable is a colored marble
     -scope is the set of rules by which 
     we sort the colored marbles

 Javascript is a compiled language
     -who is doing the looking (for the marbles?)
     -scope is a compiled-time process
     -scope decisions happen at compiling
 Compiled vs Interpretive language (must look into this later) 
 compiling vs. parsing? (need to look at this later)
 Compile - goes through atleast two passes
 'reset your thinking' from one pass through, to two
         
 Compiler/Scope Manager conversation

 var foo = "bar"
    - Compiler asks Scope Manager if it has
     ever seen a variable called "foo" before.a
    - Scope Manager says "no", then puts foo
     into global scope


 function bar() {
     var foo = "baz"
 }

     -Compiler asks SM - 'have you ever seen a bar variable?'
     -SM says no, adds bar to global scope

 function baz(foo){
     foo = "bam";
     bam = "yay";
 }






shadowing - same variable name within two different
                         scopes
        
        
        
 console.log is in the execution pass,
              not the compiling pass


             var foo = "bar"

             function bar(){
                 if console.log(foo) - you will get
                 undefined
                 var foo = "baz"
                 if console.log(foo) - you will get 'baz'
             }

             nowhere in function bar can you reference var foo from line one
               unless you do window.foo, because it are 
               specifically referring to the global foo

             undefined vs undeclared

             var foo = "bar";

             function bar(){
                 var foo = "baz";
             }

             function baz(foo){
                 foo = "bam";
                 bam = "yay";
             }


 Compiler/Scope Manager conversation for function would
       go as follows:

     1. C: "SM, do you have a identifier called foo" (line 1)
       SM: "No, but I'll add it to the global scope"

     2. C: "SM, do you have an identifier called bar"? (line 3)
       SM: "No, but I'll create a scope of bar"
    
       because bar identifies a function, which have their
         own scope, we step into the scope of 'bar'


     3. C: "SM of the scope of bar, do you have a variable called foo?" (line4)
        SM: "No, I'll add it to the scope of Bar'
foo value inside this scope is 'baz' not 'bar'

     4. C: "SM, do you have an identifier called baz?"
     SM: 'No, I'll add it to the global Scope'
        
now we step into the scope of baz
    
     5. C: "SM, do you have an identifier called foo?"
        SM: "No, Ill add it"
       
       
scope has now been sorted, compiling is complete
execution begins

Position is important
LHS reference - left-hand-side, RHS reference- right-hand-side
target (LHS) - value (RHS)

When execution pass starts, declarations no longer
exist - only executable code left

Conversation shifts from compiler to Javascript
engine - still conversing with scope manager

     6. Engine: "Global scope, do you have an LHS reference called foo?"
        SM: "Yes"

     7. Engine: "Hey Scope of bar, I have a LHS ref for foo? Have one?"
        SM: "Yes - it's baz"

     8. Engine: "Hey Scope of Baz, I have a LHS reference for foo. have one?"
        SM: "Yes" (because of foo parameter)

     9. Engine: "Hey Scope of Baz, I have an LHS for bam. Have one?"
        SM: "Nope."
goes to Global scope
        Engine: "Global scope, do you have bam?"
        SM: "Nope - but I made one for you anyway at run time"
          bam is now a global variable

DO NOT create code on the assumption that it will be
      declared as a global identifier - in strict mode, it's an error
In strict        
    
STRICT MODE - You should use strict mode
in all of your programming - came up in 2008
"future of the language"
strict mode - "set of suggestions that will help make your code run faster"

        
NAMED FUNCTION EXPRESSIONS:

If a function has more than a few lines, make it a function EXPRESSIONS
If a function is longer, it should be a function declarations

Anonymous function expression vs named function expression:
-you should prefer a named function expression
   Three reasons:
   1. handy self-reference that can refer to itself from the inside
   2. more debuggable stack traces (Chrome debugger
   tools will you the function name, not just 'anonymous')
   3. more self-documenting code (helps our future selves to know what's going on)

todo comments - leave comment in the code called to do,
                search todo and you will find it and complete
                the task

Readability vs. quickness 
-Kyle Simpson believes there is a conflict between
  writing readable code and writing quick code with few characters
   

-If you have a variable that you wish to preserve,
create a function around it - it's lexical scope protects it

IIFE - Immediately-invoked function expression
when a function identifier is used then invoked
--





